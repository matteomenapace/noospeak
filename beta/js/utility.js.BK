/** FUNZIONI */
var count = 0;
var searcher;
var results;
var query;
var gFilter;
var nooStatus;
var gInput;
var gType;

var callback = {
	getresponse : function(response){
		query = response;
		searcher.execute(query);
	},
	
	getranked : function(sentence){
		gType='google';
		loadResponse(sentence[0],results[sentence[1]].url,gType);
		nooStatus.innerHTML = "NooSpeak wrote something. Now it's your turn";
		updateChatCloud(sentence[3]);
		gType='user';
		updateChatCloud(sentence[2]);
	},
	
	getresponseon : function(response) {
		loadResponse(response,'#','alice');
	}
}

var remote = new myserver(callback);

function print_r(theObj){
  if(theObj.constructor == Array ||
     theObj.constructor == Object){
    ("<ul>")
    for(var p in theObj){
      if(theObj[p].constructor == Array||
         theObj[p].constructor == Object){
("<li>["+p+"] => "+typeof(theObj)+"</li>");
        ("<ul>")
        print_r(theObj[p]);
        ("</ul>")
      } else {
("<li>["+p+"] => "+theObj[p]+"</li>");
      }
    }
    ("</ul>")
  }
}


function OnLoad() {

 searcher = new GwebSearch();

searcher.setResultSetSize(GSearch.LARGE_RESULTSET);
searcher.setNoHtmlGeneration();
searcher.setSearchCompleteCallback(null, OnWebSearch);

getElementById('inputStart').focus();
nooStatus = getElementById('status');

}

function search(input,filter,botname) {
	
	gType = 'user';
	gFilter = filter;
	gInput = input;
	loadResponse(input,'#',gType);
	nooStatus.innerHTML = 'NooSpeak is thinking...';
	
	if(filter=='on')
	remote.getresponseon(input,botname);
	
	else
	remote.getresponse(input,filter,botname);

}

function OnWebSearch() {

results = searcher.results;

desc = new Array();

for(i=0;i<results.length;i++)
{
	desc[i]=results[i].content;
}
	remote.getranked(query,desc,gInput);

searcher.clearResults();

}

function getElementById(id) {
	var element;
 	if(document.getElementById)	element = document.getElementById(id);
 	else element = document.all[id];
 	return element;
}

function getRadioValue(form)
{
for (var i=0; i < form.filter.length; i++)
   {
   if (form.filter[i].checked)
      {
      return form.filter[i].value;
      }
   }
}
	
function assignXMLHttpRequest() {
	var XHR = null, 
	browser = navigator.userAgent.toUpperCase();
	// browser standard with native support: type of browser can be ignored
 	if(typeof(XMLHttpRequest) === "function" || typeof(XMLHttpRequest) === "object") {
		XHR = new XMLHttpRequest();
	}
	// INTERNET EXPLORER
 	// version 4 must be filtered out
 	else if(window.ActiveXObject && browser.indexOf("MSIE 4") < 0 ) {
		// version 6 has a different name for ActiveX object
  		if(browserUtente.indexOf("MSIE 5") < 0) XHR = new ActiveXObject("Msxml2.XMLHTTP");
  		// versions 5 and 5.5 instead have same name
		else XHR = new ActiveXObject("Microsoft.XMLHTTP");
	}
 	return XHR;
}

/////////////////////////////////////////////////////////////////////

function manageKeyPress(evt) {
  	var evt = (evt) ? evt : ((event) ? event : null);
  	var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
	var keyCode = evt.keyCode;
	// enter key
	if (keyCode == 13) {
		if (node.id=='inputStart' || node.id=='inputConversation') {
			loadResponse();
		} 
		return false;
	} 
}

function stopEnterKey(evt) {
  var evt = (evt) ? evt : ((event) ? event : null);
  var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
  if ((evt.keyCode == 13) && (node.type=="text"))  {return false;}
}

////////////////////////////////////////////////////////////////////

function validateRadioButton(button) {
	var count = -1;
	for (var i=button.length-1; i > -1; i--) {
		if (button[i].checked) {
			count = i; 
			i = -1;
		}
    }
    if (count > -1) return button[count].value;
    else return null;
}

/*function filteredSearchOff(){
	getElementById('filtered-toggle').innerHTML="<font size=-2>FilteredSpeak is Off - <a href=# onClick='filteredSearchOn()'>Turn it On</a></font>";	
}

function filteredSearchOn(){
	getElementById('filtered-toggle').innerHTML="<font size=-2>FilteredSpeak is On - <a href=# onClick='filteredSearchOff()'>Turn it Off</a></font>";	
}*/

////////////////////////////////////////////////////////////////////
// XML utilities

// function to read an XML node content
// ex: <node>content</node> returns "content" 
function readNodeContent(item, nodeName) {
  return item.getElementsByTagName(nodeName).item(0).firstChild.nodeValue;
};

function parseXML(xml){
	
	var items = xml.getElementsByTagName("item"),
		result = "<ul>",
		itemNode = new Object(),
		currentCategory;
	
	// populating itemNode
	for (var a = 0, b = items.length; a < b; a++) {
		
		// peculiarità dell'RSS 2.0 di edit è la presenza del tag author per ogni item. Non presente invece negli item di feedburner che in questo caso non vengono considerati
		if(items[a].getElementsByTagName("author").length === 1) {
			
			currentCategory = readNodeContent(items[a], "category");
			
			// if the object for the current category is still empty
			if(!itemNode[currentCategory]) itemNode[currentCategory] = new Array();
			
   			// [length al posto di push serve per evitare errori con vecchi browser]
   			itemNode[currentCategory][itemNode[currentCategory].length] = ({
    			titolo: readNodeContent(items[a], "title"),
    			link: readNodeContent(items[a], "guid"),
   				data: readNodeContent(items[a], "pubDate"),
    			autore: readNodeContent(items[a], "author")
   			});
		}
	}
	
	// populating result string
 	for(category in itemNode) {
  		result += "<li><strong>" + category +"</strong><ul>";
  		for(var a = 0, b = itemNode[category].length; a < b; a++) {
			result += "<li><a href=\"" +
	    		itemNode[category][a].link +"\">" +
    			itemNode[category][a].titolo + "</a>, di " +
    			itemNode[category][a].autore +"<br /><span>" +
   				itemNode[category][a].data + "</span></li>";
  		}
		result += "</ul></li>";
	}
 	result += "</ul>";
	return result;
}

function parseResponseXML(xml){
	
	var	response = xml.getElementsByTagName("response")[0],
		text = readNodeContent(response,"text"),
		time = 'sometime',
		place = 'somewhere',
		//url= readNodeContent(response,"url"),
		similarTopic='#',
		result = "valid XML!";
	
	result = "<div class='google'><div class='name'>Google</div><div class='text'>"+text+"</div><div class='info'>"+time+" "+place+" - <a href='"+similarTopic+"'>similar topic</a></div></div>";
	return result;
}

///////////////////////////////////////////////////////////////////

function styleEntry(type,text,entryId,link,time,place,similarTopic) {
	var 	entry, name;
	if (!time) time= 'sometime';
	if (!place) place='somewhere';
	if (!similarTopic) similarTopic='#';
	if(!link) link="#";
	if (type=='google') {
	name='NooSpeak:';
	entry = "<div class=\"last-entry\" id=\""+entryId+"\"><div class='name'>"+name+"</div><div class='content'><a href='"+link+"' target='_blank'>"+text+"</a></div><div class='time'>"+time+"</div> - <div class=\"place\"> "+place+"</div></div>";
	}
	
	else if(type=='user')
	{
		name='Me:';
		entry = "<div class=\"last-entry\" id=\""+entryId+"\"><div class='name'>"+name+"</div><div class='content'>"+text+"</div><div class='time'>"+time+"</div> - <div class=\"place\"> "+place+"</div></div>";

	}
	
	else
	{
		name='NooSpeak:';
		entry = "<div class=\"last-entry\" id=\""+entryId+"\"><div class='name'>"+name+"</div><div class='content'>"+text+"</div><div class='time'>"+time+"</div> - <div class=\"place\"> "+place+"</div></div>";
	}
	
	
	return entry;
}

function addEntry(element,input,link,type){
		if(count!=0)
		{
	    var lastEntry = "entry"+count;
		document.getElementById(lastEntry).className = "entry";
		}
		count++;
		var entryId = "entry"+count;
		if (type=='google')
		entry = styleEntry('google',input,entryId,link);
		else if(type=='user')
		entry = styleEntry('user',input,entryId);
		else
		entry = styleEntry('alice',input,entryId);
		
		element.innerHTML += entry;
	}
	
function getIframeWindowRef(iframeId) {
  if(document.getElementById && document.getElementById(iframeId) && 
    document.getElementById(iframeId).contentWindow)
      return document.getElementById(iframeId).contentWindow;
  else if(frames && frames[iframeId])
    return frames[iframeId];
  else return null;
}

function loadResponse(sentence,link,type){

		var start = getElementById('start'),
		// filterButton = document.forms['startForm']['filter'],
		conversation = getElementById('conversation'),
		inputBox = getElementById('inputConversation'),
		history = getElementById('chatLog');
		// status = getElementById('status'),
		// botname = getElementById('botname').innerHTML,
		//ajax = assignXMLHttpRequest(),
		// input, filter, fileName;
	
	// filter = validateRadioButton(filterButton);
	// /*if (filter == null) alert('No filtering mode selected');
	// else alert('Filtering mode: ' + filter);*/
	
	// if (start.style.display!=='none') input= getElementById('inputStart').value;
	// else input = getElementById('inputConversation').value;
	
	// fileName = 'php/response.php?input='+input;
	// fileName += '&botname='+botname;
	// fileName += '&filter='+filter;

	// hide #start, show #conversation 
	start.style.display='none';
	conversation.style.display='inline';
	getElementById('filterField').value = gFilter;
	
	inputBox.value="";
	inputBox.focus();
		
	addEntry(history,sentence,link,type);
	
	
	
	
	
	//history.innerHTML += styledInput;
	history.scrollTop = history.scrollHeight - history.clientHeight;

/*   	if(ajax) {
		//status.innerHTML = "ajax initialized";
		
		// set GET asinchronous request 
		ajax.open("get", fileName, true);
		
		// remove header "connection" as "keep alive"
    	ajax.setRequestHeader("connection", "close");
		
    	ajax.onreadystatechange = function() {
			if(ajax.readyState === readyState.INACTIVE) status.innerHTML = googleStatus.INACTIVE;
			if(ajax.readyState === readyState.INITIALIZED) status.innerHTML = googleStatus.INITIALIZED;
			if(ajax.readyState === readyState.SENT) status.innerHTML = googleStatus.SENT;
      		if(ajax.readyState === readyState.RECEIVED) status.innerHTML = googleStatus.RECEIVED;
      		if(ajax.readyState === readyState.LOADED) {
				status.innerHTML = googleStatus.LOADED;
        		if(statusText[ajax.status] === "OK") {
					if(ajax.responseXML) {
						var response = parseResponseXML(ajax.responseXML);
						history.innerHTML += response;
					} else {
						history.innerHTML += "<br>unvalid XML.<br><br>" + ajax.responseText.split('<').join("&lt;").split('>').join("&gt;");
						//var styledResponse = styleEntry('google',ajax.responseText);
						//history.innerHTML += styledResponse;
					}
				} else {
          			status.innerHTML = "Google cannot hear you! ";
          			status.innerHTML += "It's your fault, precisely: " + statusText[ajax.status];
					history.innerHTML += ajax.responseText;
        		}
				history.scrollTop = history.scrollHeight - history.clientHeight;
				updateChatCloud('users');
				updateChatCloud('google');
			} 
		}
  		ajax.send(null);
	} */
	return false;
}

function updateChatCloud(content){
	
	if (gType=='google') var cloudFrame = getIframeWindowRef('chatCloudContentBottom');
	else var cloudFrame = getIframeWindowRef('chatCloudContentTop');
	
	var cloudBox = cloudFrame.getElementById('chatCloud');
	
	cloudBox.innerHTML = content;

}

/*function updateChatCloud(id){
	var cloud = getElementById(id+'Cloud'),
	status = getElementById(id+'Status'),
	ajax = assignXMLHttpRequest(),
	fileName = 'php/chatCloud/cloud.php?id='+id;
	
	// hide cloud, show status
	cloud.style.display='none';
	status.style.display='block';
	
	if(ajax) {
		// set GET asinchronous request 
		ajax.open("get", fileName, true);
		// remove header "connection" as "keep alive"
    	ajax.setRequestHeader("connection", "close");
		
    	ajax.onreadystatechange = function() {
			if(ajax.readyState === readyState.INACTIVE) status.innerHTML = chatCloudStatus.INACTIVE;
			if(ajax.readyState === readyState.INITIALIZED) status.innerHTML = chatCloudStatus.INITIALIZED;
			if(ajax.readyState === readyState.SENT) status.innerHTML = chatCloudStatus.SENT;
      		if(ajax.readyState === readyState.RECEIVED) status.innerHTML = chatCloudStatus.RECEIVED;
      		if(ajax.readyState === readyState.LOADED) {
				status.innerHTML = chatCloudStatus.LOADED;
        		if(statusText[ajax.status] === "OK") {
					status.style.display='none';
					cloud.innerHTML = ajax.responseText;
					resizeClouds();
					cloud.style.display='block';
				} else {
          			status.innerHTML = "Google is enable to generate a chatCloud for you! ";
          			status.innerHTML += "It's your fault, precisely: " + statusText[ajax.status];
        		}
			} 
		}
  		ajax.send(null);
	}
}*/

function onLoaded(object){}

function resizeClouds(){
	var padding=4, margin=4;
	resizeCloud('users', padding, margin);
	resizeCloud('google', padding, margin);
}

function resizeCloud(id, padding, margin) {
	var globalHeight=getElementById(id).offsetHeight,
	headerHeight=getElementById(id+'Header').offsetHeight,
	cloud=getElementById(id+'Cloud'),
	resizedHeight=globalHeight-headerHeight-padding*2-margin*2;
	cloud.style.height=resizedHeight+'px';
}


/** OGGETTI / ARRAY */

var chatCloudStatus= {
	INACTIVE: "Google is inactive.",
	INITIALIZED: "Google is about to generate a <b>chat-cloud</b>.",
	SENT: "Google is generating a <b>chat-cloud</b>.",
	RECEIVED: "Google is still generating a <b>chat-cloud</b> for you.",
	LOADED: "<b>Chat-cloud</b> generated. Now you can browse it!"
};

var googleStatus= {
	INACTIVE: "Google is inactive",
	INITIALIZED: "Google is thinking...",
	SENT: "Google is still thinking...",
	RECEIVED: "Google is typing..",
	LOADED: "Google wrote something. Now it's your turn."
};

// oggetto di verifica stato
var readyState = {
	INACTIVE:	0,
	INITIALIZED:	1,
	SENT:	2,
	RECEIVED:	3,
	LOADED:	4
};

// array descrittivo dei codici restituiti dal server
// [la scelta dell' array è per evitare problemi con vecchi browsers]
var statusText = new Array();
statusText[100] = "Continue";
statusText[101] = "Switching Protocols";
statusText[200] = "OK";
statusText[201] = "Created";
statusText[202] = "Accepted";
statusText[203] = "Non-Authoritative Information";
statusText[204] = "No Content";
statusText[205] = "Reset Content";
statusText[206] = "Partial Content";
statusText[300] = "Multiple Choices";
statusText[301] = "Moved Permanently";
statusText[302] = "Found";
statusText[303] = "See Other";
statusText[304] = "Not Modified";
statusText[305] = "Use Proxy";
statusText[306] = "(unused, but reserved)";
statusText[307] = "Temporary Redirect";
statusText[400] = "Bad Request";
statusText[401] = "Unauthorized";
statusText[402] = "Payment Required";
statusText[403] = "Forbidden";
statusText[404] = "Not Found";
statusText[405] = "Method Not Allowed";
statusText[406] = "Not Acceptable";
statusText[407] = "Proxy Authentication Required";
statusText[408] = "Request Timeout";
statusText[409] = "Conflict";
statusText[410] = "Gone";
statusText[411] = "Length Required";
statusText[412] = "Precondition Failed";
statusText[413] = "Request Entity Too Large";
statusText[414] = "Request-URI Too Long";
statusText[415] = "Unsupported Media Type";
statusText[416] = "Requested Range Not Satisfiable";
statusText[417] = "Expectation Failed";
statusText[500] = "Internal Server Error";
statusText[501] = "Not Implemented";
statusText[502] = "Bad Gateway";
statusText[503] = "Service Unavailable";
statusText[504] = "Gateway Timeout";
statusText[505] = "HTTP Version Not Supported";
statusText[509] = "Bandwidth Limit Exceeded";